/* eslint-disable no-console */
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function seedPaymentMethods() {
  try {
    console.log('üîß Seeding payment method configurations...\n')

    // Clear existing payment method configs
    await prisma.paymentMethodConfig.deleteMany()

    // Define all payment methods with default configurations
    const paymentMethods = [
      {
        method: 'multibanco',
        name: 'Multibanco',
        icon: 'üèß',
        enabled: true,
        processingMode: 'MANUAL' as const,
        description: 'Refer√™ncia Multibanco - Pagamento em ATM ou homebanking',
        displayOrder: 1,
      },
      {
        method: 'mbway',
        name: 'MB Way',
        icon: 'üì±',
        enabled: true,
        processingMode: 'MANUAL' as const,
        description: 'Pagamento atrav√©s da app MB Way',
        displayOrder: 2,
      },
      {
        method: 'visa',
        name: 'VISA',
        icon: 'üí≥',
        enabled: true,
        processingMode: 'AUTO' as const,
        description: 'Cart√£o de cr√©dito/d√©bito VISA - Processamento autom√°tico',
        displayOrder: 3,
      },
      {
        method: 'mastercard',
        name: 'MasterCard',
        icon: 'üí≥',
        enabled: true,
        processingMode: 'AUTO' as const,
        description: 'Cart√£o de cr√©dito/d√©bito MasterCard - Processamento autom√°tico',
        displayOrder: 4,
      },
      {
        method: 'applepay',
        name: 'Apple Pay',
        icon: 'üçé',
        enabled: true,
        processingMode: 'AUTO' as const,
        description: 'Pagamento atrav√©s do Apple Pay - Processamento autom√°tico',
        displayOrder: 5,
      },
      {
        method: 'googlepay',
        name: 'Google Pay',
        icon: 'üî¥',
        enabled: true,
        processingMode: 'AUTO' as const,
        description: 'Pagamento atrav√©s do Google Pay - Processamento autom√°tico',
        displayOrder: 6,
      },
    ]

    // Create payment method configurations
    for (const methodConfig of paymentMethods) {
      const _created = await prisma.paymentMethodConfig.create({
        data: methodConfig,
      })

      const processingType = methodConfig.processingMode === 'MANUAL' ? 'üë®‚Äçüíº Manual' : 'ü§ñ Autom√°tico'
      console.log(`‚úÖ ${methodConfig.icon} ${methodConfig.name} (${methodConfig.method})`)
      console.log(`   üìù ${methodConfig.description}`)
      console.log(`   ‚öôÔ∏è  Processamento: ${processingType}`)
      console.log(`   üî¢ Ordem: ${methodConfig.displayOrder}`)
      console.log(`   ‚úÖ Ativo: ${methodConfig.enabled ? 'Sim' : 'N√£o'}`)
      console.log('')
    }

    console.log('üéâ Payment method configurations seeded successfully!')

    // Show summary
    const summary = await prisma.paymentMethodConfig.groupBy({
      by: ['processingMode'],
      _count: { _all: true },
    })

    console.log('\nüìä Summary:')
    summary.forEach(stat => {
      const type = stat.processingMode === 'MANUAL' ? 'üë®‚Äçüíº Manual' : 'ü§ñ Autom√°tico'
      console.log(`   ${type}: ${stat._count._all} m√©todos`)
    })

    const totalEnabled = await prisma.paymentMethodConfig.count({
      where: { enabled: true },
    })

    console.log(`   ‚úÖ Ativos: ${totalEnabled} m√©todos`)
    console.log(`   üì± Total configurado: ${paymentMethods.length} m√©todos`)

  } catch (error) {
    console.error('‚ùå Error seeding payment methods:', error)
  } finally {
    await prisma.$disconnect()
  }
}

// Run the seed
if (require.main === module) {
  seedPaymentMethods()
    .then(() => {
      console.log('‚úÖ Payment methods seeded successfully!')
      process.exit(0)
    })
    .catch((error) => {
      console.error('‚ùå Payment methods seeding failed:', error)
      process.exit(1)
    })
}

export default seedPaymentMethods