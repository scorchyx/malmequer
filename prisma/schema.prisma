// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts             Account[]
  sessions             Session[]
  orders               Order[]
  cartItems            CartItem[]
  reviews              Review[]
  addresses            Address[]
  inventoryLogs        InventoryLog[]
  adminActivities      AdminActivity[]
  wishlistItems        WishlistItem[]
  notificationSettings NotificationSettings?

  @@index([email])
  @@index([role])
  @@index([createdAt])
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  parentId    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]
}

model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  price       Decimal  @db.Decimal(10, 2)
  comparePrice Decimal? @db.Decimal(10, 2)
  weight      Decimal? @db.Decimal(8, 2)
  status      ProductStatus @default(DRAFT)
  featured    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  images        ProductImage[]
  variants      ProductVariant[]
  cartItems     CartItem[]
  orderItems    OrderItem[]
  reviews       Review[]
  inventoryLogs InventoryLog[]
  wishlistItems WishlistItem[]

  @@index([categoryId, status])
  @@index([status, featured])
  @@index([name])
  @@index([createdAt])
}

model ProductImage {
  id        String @id @default(cuid())
  url       String
  alt       String?
  order     Int    @default(0)
  productId String

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductVariant {
  id        String  @id @default(cuid())
  name      String
  value     String
  price     Decimal? @db.Decimal(10, 2)
  sku       String?
  inventory Int     @default(0)
  productId String

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, name, value])
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String?
  sessionId String?
  productId String

  user    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@unique([sessionId, productId])
  @@index([sessionId])
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  status          OrderStatus @default(PENDING)
  totalAmount     Decimal     @db.Decimal(10, 2)
  subtotalAmount  Decimal     @db.Decimal(10, 2)
  taxAmount       Decimal     @db.Decimal(10, 2)
  shippingAmount  Decimal     @db.Decimal(10, 2)
  discountAmount  Decimal?    @db.Decimal(10, 2)
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   String?
  shippingMethod  String?
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Guest support
  userId            String?
  sessionId         String?
  guestEmail        String?
  guestPhone        String?

  shippingAddressId String
  billingAddressId  String
  discountId        String?

  user            User?     @relation(fields: [userId], references: [id])
  shippingAddress Address   @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress  Address   @relation("BillingAddress", fields: [billingAddressId], references: [id])
  discount        Discount? @relation(fields: [discountId], references: [id])
  items           OrderItem[]
  payments        Payment[]

  @@index([userId, status])
  @@index([sessionId, status])
  @@index([status, createdAt])
  @@index([paymentStatus])
  @@index([guestEmail])
  @@index([createdAt])
}

model OrderItem {
  id       String  @id @default(cuid())
  quantity Int
  price    Decimal @db.Decimal(10, 2)

  orderId   String
  productId String

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
}

model Address {
  id           String      @id @default(cuid())
  type         AddressType @default(SHIPPING)
  firstName    String
  lastName     String
  company      String?
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  postalCode   String
  country      String
  phone        String?
  vatNumber    String?     // NIF/VAT number for billing addresses
  isDefault    Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Guest support
  userId    String?
  sessionId String?

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  shippingOrders Order[] @relation("ShippingAddress")
  billingOrders  Order[] @relation("BillingAddress")

  @@index([userId, type, isDefault])
  @@index([sessionId, type])
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      @db.SmallInt
  title     String?
  content   String?
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  productId String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

enum Role {
  USER
  ADMIN
}

enum ProductStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model Payment {
  id              String        @id @default(cuid())
  amount          Decimal       @db.Decimal(10, 2)
  currency        String        @default("eur")
  status          PaymentStatus @default(PENDING)
  stripePaymentId String?       @unique
  paymentMethod   String?
  metadata        Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  orderId String
  order   Order  @relation(fields: [orderId], references: [id])
}

model Discount {
  id          String      @id @default(cuid())
  code        String      @unique
  type        DiscountType
  value       Decimal     @db.Decimal(10, 2)
  minAmount   Decimal?    @db.Decimal(10, 2)
  maxAmount   Decimal?    @db.Decimal(10, 2)
  maxUses     Int?
  usedCount   Int         @default(0)
  validFrom   DateTime    @default(now())
  validUntil  DateTime?
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  orders Order[]
}

model InventoryLog {
  id        String            @id @default(cuid())
  type      InventoryLogType
  quantity  Int
  reason    String?
  createdAt DateTime          @default(now())

  productId String
  userId    String?

  product Product @relation(fields: [productId], references: [id])
  user    User?   @relation(fields: [userId], references: [id])
}

model AdminActivity {
  id          String   @id @default(cuid())
  action      String
  entityType  String
  entityId    String?
  oldValues   Json?
  newValues   Json?
  description String?
  createdAt   DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model WishlistItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  userId    String?
  sessionId String?
  productId String

  user    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@unique([sessionId, productId])
  @@index([sessionId])
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum InventoryLogType {
  PURCHASE
  SALE
  ADJUSTMENT
  RETURN
}

model NotificationSettings {
  id                     String   @id @default(cuid())
  emailNotifications     Boolean  @default(true)
  orderConfirmations     Boolean  @default(true)
  orderUpdates           Boolean  @default(true)
  stockAlerts            Boolean  @default(false)
  promotionalEmails      Boolean  @default(false)
  accountUpdates         Boolean  @default(true)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum AddressType {
  SHIPPING
  BILLING
}

model PaymentMethodConfig {
  id               String              @id @default(cuid())
  method           String              @unique // multibanco, mbway, visa, mastercard, applepay, googlepay
  name             String              // Display name
  icon             String              // Emoji or icon identifier
  enabled          Boolean             @default(true)
  processingMode   PaymentProcessingMode @default(AUTO)
  description      String?
  displayOrder     Int                 @default(0)
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt

  @@index([enabled, displayOrder])
}

model AuditLog {
  id           String        @id @default(cuid())
  eventType    String
  severity     String
  actorId      String?
  actorEmail   String?
  actorRole    String?
  targetId     String?
  targetType   String?
  resourceName String?
  details      Json?
  ipAddress    String?
  userAgent    String?
  sessionId    String?
  requestId    String?
  success      Boolean       @default(true)
  errorMessage String?
  timestamp    DateTime      @default(now())
  metadata     Json?

  @@index([eventType, timestamp])
  @@index([actorId, timestamp])
  @@index([targetId, targetType])
  @@index([severity, timestamp])
}

enum PaymentProcessingMode {
  MANUAL    // Requires admin approval
  AUTO      // Automatic processing via Stripe
}
