generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                   String                @id @default(cuid())
  name                 String?
  email                String                @unique
  emailVerified        DateTime?
  image                String?
  password             String?
  role                 Role                  @default(USER)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  accounts             Account[]
  addresses            Address[]
  adminActivities      AdminActivity[]
  cartItems            CartItem[]
  inventoryLogs        InventoryLog[]
  loyaltyPoints        LoyaltyPoints?
  loyaltyTransactions  LoyaltyTransaction[]
  notifications        Notification[]
  notificationSettings NotificationSettings?
  orders               Order[]
  priceHistoryEntries  PriceHistory[]
  pushSubscriptions    PushSubscription[]
  processedRefunds     Refund[]              @relation("RefundProcessor")
  reviews              Review[]
  reviewVotes          ReviewVote[]
  sessions             Session[]
  wishlists            Wishlist[]

  @@index([email])
  @@index([role])
  @@index([createdAt])
}

model Category {
  id          String     @id @default(cuid())
  name        String     @unique
  slug        String     @unique
  description String?
  image       String?
  parentId    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]
}

model Product {
  id              String            @id @default(cuid())
  name            String
  slug            String            @unique
  description     String?
  price           Decimal           @db.Decimal(10, 2)
  comparePrice    Decimal?          @db.Decimal(10, 2)
  weight          Decimal?          @db.Decimal(8, 2)
  status          ProductStatus     @default(DRAFT)
  featured        Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  categoryId      String
  cartItems       CartItem[]
  inventoryLogs   InventoryLog[]
  orderItems      OrderItem[]
  priceHistory    PriceHistory[]
  category        Category          @relation(fields: [categoryId], references: [id])
  images          ProductImage[]
  parentProducts  ProductRelation[] @relation("ParentProducts")
  relatedProducts ProductRelation[] @relation("RelatedProducts")
  variants        ProductVariant[]
  reviews         Review[]
  wishlistItems   WishlistItem[]

  @@index([categoryId, status])
  @@index([status, featured])
  @@index([name])
  @@index([createdAt])
}

model ProductImage {
  id        String  @id @default(cuid())
  url       String
  alt       String?
  order     Int     @default(0)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductVariant {
  id         String                    @id @default(cuid())
  name       String
  value      String
  price      Decimal?                  @db.Decimal(10, 2)
  sku        String?
  inventory  Int                       @default(0)
  productId  String
  barcode    String?
  position   Int                       @default(0)
  weight     Decimal?                  @db.Decimal(8, 2)
  cartItems  CartItem[]
  orderItems OrderItem[]
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, name, value])
  @@index([productId])
  @@index([sku])
  @@index([barcode])
}


model CartItem {
  id        String          @id @default(cuid())
  quantity  Int
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  userId    String?
  productId String
  sessionId String?
  variantId String?
  product   Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  variant   ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([userId, productId, variantId])
  @@unique([sessionId, productId, variantId])
  @@index([userId])
  @@index([sessionId])
  @@index([productId])
  @@index([variantId])
}

model Order {
  id                  String               @id @default(cuid())
  orderNumber         String               @unique
  status              OrderStatus          @default(PENDING)
  totalAmount         Decimal              @db.Decimal(10, 2)
  subtotalAmount      Decimal              @db.Decimal(10, 2)
  taxAmount           Decimal              @db.Decimal(10, 2)
  shippingAmount      Decimal              @db.Decimal(10, 2)
  discountAmount      Decimal?             @db.Decimal(10, 2)
  paymentStatus       PaymentStatus        @default(PENDING)
  paymentMethod       String?
  shippingMethod      String?
  notes               String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  userId              String?
  shippingAddressId   String
  billingAddressId    String
  discountId          String?
  deliveredAt         DateTime?
  estimatedDelivery   DateTime?
  guestEmail          String?
  guestPhone          String?
  sessionId           String?
  shippedAt           DateTime?
  trackingCarrier     String?
  trackingNumber      String?
  trackingUrl         String?
  loyaltyTransactions LoyaltyTransaction[]
  billingAddress      Address              @relation("BillingAddress", fields: [billingAddressId], references: [id])
  discount            Discount?            @relation(fields: [discountId], references: [id])
  shippingAddress     Address              @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  user                User?                @relation(fields: [userId], references: [id])
  items               OrderItem[]
  payments            Payment[]
  refunds             Refund[]

  @@index([userId, status])
  @@index([sessionId, status])
  @@index([status, createdAt])
  @@index([paymentStatus])
  @@index([guestEmail])
  @@index([createdAt])
}

model OrderItem {
  id           String          @id @default(cuid())
  quantity     Int
  price        Decimal         @db.Decimal(10, 2)
  orderId      String
  productId    String
  name         String
  variantId    String?
  variantName  String?
  variantValue String?
  order        Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product      Product         @relation(fields: [productId], references: [id])
  variant      ProductVariant? @relation(fields: [variantId], references: [id])
  refundItems  RefundItem[]

  @@index([orderId])
  @@index([productId])
  @@index([variantId])
}

model Address {
  id             String      @id @default(cuid())
  firstName      String
  lastName       String
  company        String?
  addressLine1   String
  addressLine2   String?
  city           String
  state          String
  postalCode     String
  country        String
  phone          String?
  isDefault      Boolean     @default(false)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @default(now())
  userId         String?
  type           AddressType @default(SHIPPING)
  vatNumber      String?
  sessionId      String?
  user           User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  billingOrders  Order[]     @relation("BillingAddress")
  shippingOrders Order[]     @relation("ShippingAddress")

  @@index([userId, type, isDefault])
  @@index([sessionId, type])
}

model Review {
  id        String        @id @default(cuid())
  rating    Int           @db.SmallInt
  title     String?
  content   String?
  verified  Boolean       @default(false)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  userId    String
  productId String
  reported  Boolean       @default(false)
  product   Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  images    ReviewImage[]
  votes     ReviewVote[]

  @@unique([userId, productId])
  @@index([rating, createdAt])
  @@index([verified, rating])
}

model ReviewImage {
  id       String  @id @default(cuid())
  url      String
  alt      String?
  order    Int     @default(0)
  reviewId String
  review   Review  @relation(fields: [reviewId], references: [id], onDelete: Cascade)
}

model ReviewVote {
  id        String   @id @default(cuid())
  helpful   Boolean
  createdAt DateTime @default(now())
  userId    String
  reviewId  String
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, reviewId])
}

model Payment {
  id              String        @id @default(cuid())
  amount          Decimal       @db.Decimal(10, 2)
  currency        String        @default("eur")
  status          PaymentStatus @default(PENDING)
  stripePaymentId String?       @unique
  paymentMethod   String?
  metadata        Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  orderId         String
  order           Order         @relation(fields: [orderId], references: [id])

  @@index([orderId])
  @@index([status])
}

model Discount {
  id          String       @id @default(cuid())
  code        String       @unique
  type        DiscountType
  value       Decimal      @db.Decimal(10, 2)
  minAmount   Decimal?     @db.Decimal(10, 2)
  maxAmount   Decimal?     @db.Decimal(10, 2)
  maxUses     Int?
  usedCount   Int          @default(0)
  validFrom   DateTime     @default(now())
  validUntil DateTime?
  isActive   Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  orders     Order[]
}

model InventoryLog {
  id        String           @id @default(cuid())
  type      InventoryLogType
  quantity  Int
  reason    String?
  createdAt DateTime         @default(now())
  productId String
  userId    String?
  product   Product          @relation(fields: [productId], references: [id])
  user      User?            @relation(fields: [userId], references: [id])
}

model AdminActivity {
  id          String   @id @default(cuid())
  action      String
  entityType  String
  entityId    String?
  oldValues   Json?
  newValues   Json?
  description String?
  createdAt   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

model WishlistItem {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  productId  String
  notes      String?
  priority   Int      @default(0)
  wishlistId String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)

  @@unique([wishlistId, productId])
  @@index([wishlistId])
}

model Wishlist {
  id          String         @id @default(cuid())
  name        String
  description String?
  isPublic    Boolean        @default(false)
  shareToken  String?        @unique
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  userId      String
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       WishlistItem[]

  @@index([userId, isPublic])
  @@index([shareToken])
}

model NotificationSettings {
  id                 String   @id @default(cuid())
  orderConfirmations Boolean  @default(true)
  orderUpdates       Boolean  @default(true)
  stockAlerts        Boolean  @default(false)
  promotionalEmails  Boolean  @default(false)
  accountUpdates     Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  userId             String   @unique
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PaymentMethodConfig {
  id             String                @id @default(cuid())
  method         String                @unique
  name           String
  icon           String
  enabled        Boolean               @default(true)
  processingMode PaymentProcessingMode @default(AUTO)
  description    String?
  displayOrder   Int                   @default(0)
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt

  @@index([enabled, displayOrder])
}

model AuditLog {
  id           String   @id @default(cuid())
  eventType    String
  severity     String
  actorId      String?
  actorEmail   String?
  actorRole    String?
  targetId     String?
  targetType   String?
  resourceName String?
  details      Json?
  ipAddress    String?
  userAgent    String?
  sessionId    String?
  requestId    String?
  success      Boolean  @default(true)
  errorMessage String?
  timestamp    DateTime @default(now())
  metadata     Json?

  @@index([eventType, timestamp])
  @@index([actorId, timestamp])
  @@index([targetId, targetType])
  @@index([severity, timestamp])
}


model LoyaltyPoints {
  id              String      @id @default(cuid())
  availablePoints Int         @default(0)
  lifetimePoints  Int         @default(0)
  tier            LoyaltyTier @default(BRONZE)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  userId          String      @unique
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LoyaltyTransaction {
  id          String                 @id @default(cuid())
  type        LoyaltyTransactionType
  points      Int
  description String?
  createdAt   DateTime               @default(now())
  expiresAt   DateTime?
  userId      String
  orderId     String?
  order       Order?                 @relation(fields: [orderId], references: [id])
  user        User                   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type])
  @@index([expiresAt])
}

model Refund {
  id           String       @id @default(cuid())
  refundNumber String       @unique
  amount       Decimal      @db.Decimal(10, 2)
  reason       RefundReason
  status       RefundStatus @default(PENDING)
  notes        String?
  processedAt  DateTime?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  orderId      String
  processedBy  String?
  order        Order        @relation(fields: [orderId], references: [id])
  processor    User?        @relation("RefundProcessor", fields: [processedBy], references: [id])
  items        RefundItem[]

  @@index([orderId])
  @@index([status, createdAt])
}

model RefundItem {
  id          String    @id @default(cuid())
  quantity    Int
  amount      Decimal   @db.Decimal(10, 2)
  reason      String?
  refundId    String
  orderItemId String
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id])
  refund      Refund    @relation(fields: [refundId], references: [id], onDelete: Cascade)

  @@unique([refundId, orderItemId])
}

model ProductRelation {
  id               String              @id @default(cuid())
  type             ProductRelationType
  position         Int                 @default(0)
  createdAt        DateTime            @default(now())
  productId        String
  relatedProductId String
  product          Product             @relation("ParentProducts", fields: [productId], references: [id], onDelete: Cascade)
  relatedProduct   Product             @relation("RelatedProducts", fields: [relatedProductId], references: [id], onDelete: Cascade)

  @@unique([productId, relatedProductId, type])
  @@index([productId, type])
}

model PriceHistory {
  id           String   @id @default(cuid())
  price        Decimal  @db.Decimal(10, 2)
  comparePrice Decimal? @db.Decimal(10, 2)
  reason       String?
  createdAt    DateTime @default(now())
  productId    String
  createdBy    String?
  user         User?    @relation(fields: [createdBy], references: [id])
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId, createdAt])
}

model PushSubscription {
  id        String   @id @default(cuid())
  endpoint  String   @unique
  p256dh    String
  auth      String
  userAgent String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  lastUsed  DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isActive])
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  title     String
  message   String
  data      Json?
  read      Boolean          @default(false)
  readAt    DateTime?
  createdAt DateTime         @default(now())
  userId    String?
  user      User?            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read])
  @@index([type, createdAt])
}

enum Role {
  USER
  ADMIN
}

enum ProductStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum InventoryLogType {
  PURCHASE
  SALE
  ADJUSTMENT
  RETURN
}

enum AddressType {
  SHIPPING
  BILLING
}

enum PaymentProcessingMode {
  MANUAL
  AUTO
}

enum LoyaltyTier {
  BRONZE
  SILVER
  GOLD
  PLATINUM
}

enum LoyaltyTransactionType {
  EARNED
  REDEEMED
  EXPIRED
  ADJUSTED
  BONUS
}

enum RefundReason {
  DEFECTIVE
  WRONG_ITEM
  NOT_AS_DESCRIBED
  CUSTOMER_REQUEST
  DAMAGED_SHIPPING
  OTHER
}

enum RefundStatus {
  PENDING
  APPROVED
  PROCESSING
  COMPLETED
  REJECTED
}

enum ProductRelationType {
  RELATED
  CROSS_SELL
  UP_SELL
  BUNDLE
  ALTERNATIVE
}

enum NotificationType {
  ORDER_UPDATE
  PAYMENT_UPDATE
  SHIPPING_UPDATE
  STOCK_ALERT
  PROMOTION
  SYSTEM_MESSAGE
}
