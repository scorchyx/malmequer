// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts             Account[]
  sessions             Session[]
  orders               Order[]
  cartItems            CartItem[]
  reviews              Review[]
  reviewVotes          ReviewVote[]
  addresses            Address[]
  inventoryLogs        InventoryLog[]
  adminActivities      AdminActivity[]
  wishlistItems        WishlistItem[]
  wishlists            Wishlist[]
  notificationSettings NotificationSettings?
  coupons              UserCoupon[]
  loyaltyPoints        LoyaltyPoints?
  loyaltyTransactions  LoyaltyTransaction[]
  pushSubscriptions    PushSubscription[]
  processedRefunds     Refund[]              @relation("RefundProcessor")
  priceHistoryEntries  PriceHistory[]
  notifications        Notification[]

  @@index([email])
  @@index([role])
  @@index([createdAt])
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  image       String?
  parentId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]
}

model Product {
  id           String        @id @default(cuid())
  name         String
  slug         String        @unique
  description  String?
  price        Decimal       @db.Decimal(10, 2)
  comparePrice Decimal?      @db.Decimal(10, 2)
  weight       Decimal?      @db.Decimal(8, 2)
  status       ProductStatus @default(DRAFT)
  featured     Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  images          ProductImage[]
  variants        ProductVariant[]
  cartItems       CartItem[]
  orderItems      OrderItem[]
  reviews         Review[]
  inventoryLogs   InventoryLog[]
  wishlistItems   WishlistItem[]
  priceHistory    PriceHistory[]
  relatedProducts ProductRelation[] @relation("RelatedProducts")
  parentProducts  ProductRelation[] @relation("ParentProducts")

  @@index([categoryId, status])
  @@index([status, featured])
  @@index([name])
  @@index([createdAt])
}

model ProductImage {
  id        String  @id @default(cuid())
  url       String
  alt       String?
  order     Int     @default(0)
  productId String

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductVariant {
  id        String   @id @default(cuid())
  name      String // e.g., "Color-Size"
  value     String // e.g., "Red-Large"
  price     Decimal? @db.Decimal(10, 2)
  sku       String?
  inventory Int      @default(0)
  weight    Decimal? @db.Decimal(8, 2)
  barcode   String?
  position  Int      @default(0)
  productId String

  product    Product                   @relation(fields: [productId], references: [id], onDelete: Cascade)
  attributes ProductVariantAttribute[]
  cartItems  CartItemVariant[]
  orderItems OrderItemVariant[]

  @@unique([productId, name, value])
  @@index([sku])
  @@index([barcode])
}

model ProductVariantAttribute {
  id        String @id @default(cuid())
  name      String // e.g., "Color", "Size", "Material"
  value     String // e.g., "Red", "Large", "Cotton"
  variantId String

  variant ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([variantId, name])
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String?
  sessionId String?
  productId String

  user     User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  product  Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
  variants CartItemVariant[]

  @@unique([userId, productId])
  @@unique([sessionId, productId])
  @@index([sessionId])
}

model CartItemVariant {
  id         String @id @default(cuid())
  quantity   Int
  cartItemId String
  variantId  String

  cartItem CartItem       @relation(fields: [cartItemId], references: [id], onDelete: Cascade)
  variant  ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([cartItemId, variantId])
}

model Order {
  id             String        @id @default(cuid())
  orderNumber    String        @unique
  status         OrderStatus   @default(PENDING)
  totalAmount    Decimal       @db.Decimal(10, 2)
  subtotalAmount Decimal       @db.Decimal(10, 2)
  taxAmount      Decimal       @db.Decimal(10, 2)
  shippingAmount Decimal       @db.Decimal(10, 2)
  discountAmount Decimal?      @db.Decimal(10, 2)
  paymentStatus  PaymentStatus @default(PENDING)
  paymentMethod  String?
  shippingMethod String?
  notes          String?

  // Shipping tracking
  trackingNumber    String?
  trackingCarrier   String?
  trackingUrl       String?
  shippedAt         DateTime?
  estimatedDelivery DateTime?
  deliveredAt       DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Guest support
  userId     String?
  sessionId  String?
  guestEmail String?
  guestPhone String?

  shippingAddressId String
  billingAddressId  String
  discountId        String?

  user                User?                @relation(fields: [userId], references: [id])
  shippingAddress     Address              @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress      Address              @relation("BillingAddress", fields: [billingAddressId], references: [id])
  discount            Discount?            @relation(fields: [discountId], references: [id])
  items               OrderItem[]
  payments            Payment[]
  refunds             Refund[]
  loyaltyTransactions LoyaltyTransaction[]

  @@index([userId, status])
  @@index([sessionId, status])
  @@index([status, createdAt])
  @@index([paymentStatus])
  @@index([guestEmail])
  @@index([createdAt])
}

model OrderItem {
  id       String  @id @default(cuid())
  quantity Int
  price    Decimal @db.Decimal(10, 2)
  name     String // Snapshot of product name at time of order

  orderId   String
  productId String

  order       Order              @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product            @relation(fields: [productId], references: [id])
  variants    OrderItemVariant[]
  refundItems RefundItem[]
}

model OrderItemVariant {
  id           String  @id @default(cuid())
  quantity     Int
  price        Decimal @db.Decimal(10, 2)
  variantName  String // Snapshot of variant name
  variantValue String // Snapshot of variant value

  orderItemId String
  variantId   String? // May be null if variant was deleted

  orderItem OrderItem       @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  variant   ProductVariant? @relation(fields: [variantId], references: [id])

  @@unique([orderItemId, variantId])
}

model Address {
  id           String      @id @default(cuid())
  type         AddressType @default(SHIPPING)
  firstName    String
  lastName     String
  company      String?
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  postalCode   String
  country      String
  phone        String?
  vatNumber    String? // NIF/VAT number for billing addresses
  isDefault    Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Guest support
  userId    String?
  sessionId String?

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  shippingOrders Order[] @relation("ShippingAddress")
  billingOrders  Order[] @relation("BillingAddress")

  @@index([userId, type, isDefault])
  @@index([sessionId, type])
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      @db.SmallInt
  title     String?
  content   String?
  verified  Boolean  @default(false)
  helpful   Int      @default(0) // Helpful votes count
  reported  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  productId String

  user    User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  images  ReviewImage[]
  votes   ReviewVote[]

  @@unique([userId, productId])
  @@index([rating, createdAt])
  @@index([verified, rating])
}

model ReviewImage {
  id       String  @id @default(cuid())
  url      String
  alt      String?
  order    Int     @default(0)
  reviewId String

  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
}

model ReviewVote {
  id        String   @id @default(cuid())
  helpful   Boolean // true = helpful, false = not helpful
  createdAt DateTime @default(now())

  userId   String
  reviewId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@unique([userId, reviewId])
}

enum Role {
  USER
  ADMIN
}

enum ProductStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model Payment {
  id              String        @id @default(cuid())
  amount          Decimal       @db.Decimal(10, 2)
  currency        String        @default("eur")
  status          PaymentStatus @default(PENDING)
  stripePaymentId String?       @unique
  paymentMethod   String?
  metadata        Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  orderId String
  order   Order  @relation(fields: [orderId], references: [id])
}

model Discount {
  id         String       @id @default(cuid())
  code       String       @unique
  type       DiscountType
  value      Decimal      @db.Decimal(10, 2)
  minAmount  Decimal?     @db.Decimal(10, 2)
  maxAmount  Decimal?     @db.Decimal(10, 2)
  maxUses    Int?
  usedCount  Int          @default(0)
  validFrom  DateTime     @default(now())
  validUntil DateTime?
  isActive   Boolean      @default(true)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  orders      Order[]
  userCoupons UserCoupon[]
}

model InventoryLog {
  id        String           @id @default(cuid())
  type      InventoryLogType
  quantity  Int
  reason    String?
  createdAt DateTime         @default(now())

  productId String
  userId    String?

  product Product @relation(fields: [productId], references: [id])
  user    User?   @relation(fields: [userId], references: [id])
}

model AdminActivity {
  id          String   @id @default(cuid())
  action      String
  entityType  String
  entityId    String?
  oldValues   Json?
  newValues   Json?
  description String?
  createdAt   DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model WishlistItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  notes     String? // Personal notes about the item
  priority  Int      @default(0) // Priority level (0-5)

  userId     String?
  sessionId  String?
  productId  String
  wishlistId String?

  user     User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product  Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  wishlist Wishlist? @relation(fields: [wishlistId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@unique([sessionId, productId])
  @@index([sessionId])
  @@index([wishlistId])
}

model Wishlist {
  id          String   @id @default(cuid())
  name        String
  description String?
  isPublic    Boolean  @default(false)
  shareToken  String?  @unique // For sharing wishlist
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId String
  user   User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items  WishlistItem[]

  @@index([userId, isPublic])
  @@index([shareToken])
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum InventoryLogType {
  PURCHASE
  SALE
  ADJUSTMENT
  RETURN
}

model NotificationSettings {
  id                 String   @id @default(cuid())
  emailNotifications Boolean  @default(true)
  orderConfirmations Boolean  @default(true)
  orderUpdates       Boolean  @default(true)
  stockAlerts        Boolean  @default(false)
  promotionalEmails  Boolean  @default(false)
  accountUpdates     Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum AddressType {
  SHIPPING
  BILLING
}

model PaymentMethodConfig {
  id             String                @id @default(cuid())
  method         String                @unique // multibanco, mbway, visa, mastercard, applepay, googlepay
  name           String // Display name
  icon           String // Emoji or icon identifier
  enabled        Boolean               @default(true)
  processingMode PaymentProcessingMode @default(AUTO)
  description    String?
  displayOrder   Int                   @default(0)
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt

  @@index([enabled, displayOrder])
}

model AuditLog {
  id           String   @id @default(cuid())
  eventType    String
  severity     String
  actorId      String?
  actorEmail   String?
  actorRole    String?
  targetId     String?
  targetType   String?
  resourceName String?
  details      Json?
  ipAddress    String?
  userAgent    String?
  sessionId    String?
  requestId    String?
  success      Boolean  @default(true)
  errorMessage String?
  timestamp    DateTime @default(now())
  metadata     Json?

  @@index([eventType, timestamp])
  @@index([actorId, timestamp])
  @@index([targetId, targetType])
  @@index([severity, timestamp])
}

enum PaymentProcessingMode {
  MANUAL // Requires admin approval
  AUTO // Automatic processing via Stripe
}

// ===== NEW MODELS FOR ENHANCED FUNCTIONALITY =====

model UserCoupon {
  id        String    @id @default(cuid())
  used      Boolean   @default(false)
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  expiresAt DateTime?

  userId     String
  discountId String

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  discount Discount @relation(fields: [discountId], references: [id], onDelete: Cascade)

  @@unique([userId, discountId])
  @@index([userId, used])
  @@index([expiresAt])
}

model LoyaltyPoints {
  id              String      @id @default(cuid())
  totalPoints     Int         @default(0)
  availablePoints Int         @default(0)
  lifetimePoints  Int         @default(0)
  tier            LoyaltyTier @default(BRONZE)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LoyaltyTransaction {
  id          String                 @id @default(cuid())
  type        LoyaltyTransactionType
  points      Int
  description String?
  createdAt   DateTime               @default(now())
  expiresAt   DateTime? // For earned points

  userId  String
  orderId String?

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  order Order? @relation(fields: [orderId], references: [id])

  @@index([userId, type])
  @@index([expiresAt])
}

model Refund {
  id           String       @id @default(cuid())
  refundNumber String       @unique
  amount       Decimal      @db.Decimal(10, 2)
  reason       RefundReason
  status       RefundStatus @default(PENDING)
  notes        String?
  processedAt  DateTime?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  orderId     String
  processedBy String?

  order     Order        @relation(fields: [orderId], references: [id])
  processor User?        @relation("RefundProcessor", fields: [processedBy], references: [id])
  items     RefundItem[]

  @@index([orderId])
  @@index([status, createdAt])
}

model RefundItem {
  id       String  @id @default(cuid())
  quantity Int
  amount   Decimal @db.Decimal(10, 2)
  reason   String?

  refundId    String
  orderItemId String

  refund    Refund    @relation(fields: [refundId], references: [id], onDelete: Cascade)
  orderItem OrderItem @relation(fields: [orderItemId], references: [id])

  @@unique([refundId, orderItemId])
}

model ProductRelation {
  id        String              @id @default(cuid())
  type      ProductRelationType
  position  Int                 @default(0)
  createdAt DateTime            @default(now())

  productId        String
  relatedProductId String

  product        Product @relation("ParentProducts", fields: [productId], references: [id], onDelete: Cascade)
  relatedProduct Product @relation("RelatedProducts", fields: [relatedProductId], references: [id], onDelete: Cascade)

  @@unique([productId, relatedProductId, type])
  @@index([productId, type])
}

model PriceHistory {
  id           String   @id @default(cuid())
  price        Decimal  @db.Decimal(10, 2)
  comparePrice Decimal? @db.Decimal(10, 2)
  reason       String? // e.g., "Sale", "Price increase", "Competitor match"
  createdAt    DateTime @default(now())

  productId String
  createdBy String?

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User?   @relation(fields: [createdBy], references: [id])

  @@index([productId, createdAt])
}

model PushSubscription {
  id        String   @id @default(cuid())
  endpoint  String   @unique
  p256dh    String
  auth      String
  userAgent String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  lastUsed  DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isActive])
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  title     String
  message   String
  data      Json?
  read      Boolean          @default(false)
  readAt    DateTime?
  createdAt DateTime         @default(now())

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read])
  @@index([type, createdAt])
}

// ===== NEW ENUMS =====

enum LoyaltyTier {
  BRONZE
  SILVER
  GOLD
  PLATINUM
}

enum LoyaltyTransactionType {
  EARNED // Points earned from purchase
  REDEEMED // Points used for discount
  EXPIRED // Points expired
  ADJUSTED // Manual adjustment
  BONUS // Bonus points
}

enum RefundReason {
  DEFECTIVE
  WRONG_ITEM
  NOT_AS_DESCRIBED
  CUSTOMER_REQUEST
  DAMAGED_SHIPPING
  OTHER
}

enum RefundStatus {
  PENDING
  APPROVED
  PROCESSING
  COMPLETED
  REJECTED
}

enum ProductRelationType {
  RELATED // General related products
  CROSS_SELL // Products to cross-sell
  UP_SELL // Products to up-sell
  BUNDLE // Bundled products
  ALTERNATIVE // Alternative products
}

enum NotificationType {
  ORDER_UPDATE
  PAYMENT_UPDATE
  SHIPPING_UPDATE
  STOCK_ALERT
  PROMOTION
  SYSTEM_MESSAGE
}
